#version 130

in vec3 N;
in vec3 v;    



uniform sampler2D color_texture;
uniform vec4 color1 = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 color2 = vec4(0.3, 0.7, 0.5, 1.0);
 
uniform vec3 StripeColor = vec3(1.0, 1.0, 1.0);
uniform vec3 BackColor = vec3(1.0, 1.0, 1.0);

uniform float Width = 0.3;
uniform float Fuzz = 0.1;
uniform float Scale = 10.0;
in float TexCoord;
out vec4 colorOut;


void main (void)  
{  

   //Ross: Here's a hint on how to get the light source position
   vec3 light = gl_LightSource[0].position.xyz;   
   vec3 L = normalize(light - v.xyz);
   
   //Ross: V is the view direction vector and we are in Eye Coordinates, so EyePos is (0,0,0)  
   vec3 V = normalize(vec3(-v.x, -v.y, -v.z));
   
   //calculate Ambient Term:  
   vec4 amb = gl_FrontLightProduct[0].ambient;
   amb = clamp(amb, 0.0, 1.0);
   
   //calculate Diffuse Term:  
   vec4 dif = max( dot(N, L), 0.0) * gl_FrontLightProduct[0].diffuse;
   dif = clamp(dif, 0.0, 1.0);
   
   //calculate Specular Term:
   float alpha = gl_FrontMaterial.shininess;
   vec3 R = normalize(2 * dot(L, N) * N - L);
   vec4 spec = pow( max(dot(V, R), 0.0), alpha) * gl_FrontLightProduct[0].specular;
   spec = clamp(spec, 0.0, 1.0);
   
   // write Total Color:  
   vec4 color = gl_FrontLightModelProduct.sceneColor+amb + spec + dif;
   
   //create stripe, this part of code is taken from redbook
   float scaleT = fract(TexCoord * Scale);
   float frac1 = clamp(scaleT / Fuzz, 0.0, 1.0);
   float frac2 = clamp( (scaleT - Width) / Fuzz, 0.0, 1.0);
   
   frac1 = frac1 * (1.0 - frac2);
   frac1 - frac1 * frac1 * (3.0 - (2.0 * frac1));
   
   vec3 finalColor = mix(BackColor, StripeColor, frac1);
   vec3 DiffuseColor = clamp(amb.rgb + dif.rgb, 0.0, 1.0);
   finalColor = finalColor * DiffuseColor + clamp(spec.rgb, 0.0, 1.0);
   //Ross: If I want to sample my texture, I need to sample it at the (s,t) coordinate of my texture coordinate  
   gl_FragColor = vec4(finalColor, 0.7);
   //Ross: Generic color output is now making all geometry blue
   //colorOut = color1;


}    